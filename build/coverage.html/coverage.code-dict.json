{"/home/travis/build/npmtest/node-npmtest-ampersand/test.js":"/* istanbul instrument in package npmtest_ampersand */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ampersand/lib.npmtest_ampersand.js":"/* istanbul instrument in package npmtest_ampersand */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ampersand = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ampersand = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ampersand/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ampersand && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ampersand */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ampersand\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ampersand.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ampersand.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ampersand.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ampersand.__dirname + '/lib.npmtest_ampersand.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/bin/ampersand":"#!/usr/bin/env node\n\nvar path = require('path');\nvar chalk = require('chalk');\nvar wizard = require('../lib/app/wizard');\nvar generateTemplate = require('../lib/generate-template');\nvar rc = require('rc');\nvar findRoot = require('find-root');\nvar templateDir = __dirname + '/../lib/templates';\nvar config = rc('ampersand', {\n    framework: 'hapi',\n    indent: 4,\n    view: templateDir + '/view.js',\n    router: templateDir + '/router.js',\n    model: templateDir + '/model.js',\n    page: templateDir + '/page.js',\n    collection: templateDir + '/collection.js',\n    clientfolder: 'client',\n    viewfolder: 'views',\n    pagefolder: 'pages',\n    modelfolder: 'models',\n    formsfolder: 'forms',\n    collectionfolder: 'models',\n    makecollection: true,\n    // if it was called without the 'gen' argument we're building a new one\n    // so we won't look for an application root\n    approot: (process.argv[2] !== 'gen') ? process.cwd() : findRoot(process.cwd()),\n    h: false,\n    help: false,\n    f: false,\n    force: false,\n    quotes: 'single'\n});\n\n// alias\nconfig.force = config.force || config.f;\nconfig.help = config.help || config.h;\n\n['view', 'router', 'model', 'page'].forEach(function (key) {\n    config[key] = path.resolve(config[key]);\n});\n\nif (config.help) {\n    console.log(chalk.bold('ampersand') + ' starts a generator for building an app');\n    console.log(chalk.bold('ampersand gen view  ${name}') + ' generates a view in appropriate folder in current folder (per config)');\n    console.log(chalk.bold('ampersand gen model ${name}') + ' generates a model in appropriate folder in current folder (per config)');\n    console.log(chalk.bold('ampersand gen form ${model}') + ' generates a form based on the model in appropriate folder in current folder (per config)');\n    console.log(chalk.bold('ampersand gen router ${optional name}') + ' generates a router in client app folder in current folder (per config)');\n    console.log(chalk.bold('ampersand gen page ${name}') + ' generates a page view in appropriate folder in current folder (per config)');\n    process.exit(0);\n}\n\n// if no command is specified assume they want to start\n// a new app.\nif (!config._.length) {\n    wizard(config);\n} else if (config._[0] === 'gen') {\n    config.name = config._[1];\n    generateTemplate(config);\n}\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/app/wizard.js":"var inquirer = require('inquirer');\nvar chalk = require('chalk');\nvar generateApp = require('./generateApp');\nvar _ = require('lodash')\n\n\nmodule.exports = function (config) {\n    var appName = 'My Amazing App';\n    if (config.name) {\n        var name = config.name.split(' ')[0];\n        name = name.slice(0, 1).toUpperCase() + name.slice(1);\n        appName = name + '\\'s Amazing App';\n    }\n\n    function required(value) {\n        return !!value.trim() || 'Required';\n    }\n\n    console.log([\n        chalk.bold('ampersand.js') + ' - app generator',\n        '',\n        'This will make a new directory for your app in:',\n        chalk.magenta(process.cwd()),\n        '',\n    ].join('\\n'));\n\n    var questions = [\n        {\n            name: 'projectFolder',\n            message: 'What do you want to call the folder?',\n            validate: required\n        },\n        {\n            name: 'title',\n            message: 'What is the human friendly title of your app?',\n            default: appName,\n            filter: function (value) {\n                return value.replace('\"', '');\n            },\n            validate: required\n        },\n        {\n            type: 'list',\n            name: 'framework',\n            message: 'Do you want to use hapi or express as a server framework?',\n            default: config.framework || 'hapi',\n            choices: ['hapi', 'express']\n        },\n        {\n            name: 'author',\n            message: [\n                'What\\'s your name? Used to populate \"author\" field of \"package.json\", as:',\n                '',\n                chalk.grey('{'),\n                chalk.grey('  \"name\": \"app\",'),\n                chalk.grey('  \"version\": \"0.0.1\",'),\n                chalk.grey('  \"author\": \"' + chalk.magenta('Your answer') + '\",'),\n                chalk.grey('  \"dependencies\": ...'),\n                chalk.grey('}'),\n                '',\n                chalk.white('Author Name:')\n            ].join('\\n'),\n            default: config.name,\n            validate: required\n        }\n    ];\n\n    inquirer.prompt(questions, function (answers) {\n        generateApp(_.assign(config, answers), function (err) {\n            if (err) return console.log(chalk.red('error:'), err);\n            console.log([\n                chalk.magenta(chalk.bold(answers.title) + ' was created!'),\n                'now cd to it, install dependencies, and run it:',\n                chalk.grey('    $ cd ' + answers.projectFolder + ' && npm install && npm start'),\n                ''\n            ].join('\\n\\n'));\n            process.stdin.destroy();\n        });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/app/generateApp.js":"var fs = require('fs-extra');\nvar slugger = require('slugger');\n\nvar TransformStream = require('./transformStream');\nvar getPackageFile = require('./getPackageFile');\nvar processString = require('./processString');\n\n\n/*\n{\n    framework: 'hapi' || 'express',\n    title: 'string',\n    machineName: 'string',\n    author: 'string',\n    folder: 'path string'\n}\n*/\nmodule.exports = function (options, cb) {\n    if (!options.title || !options.projectFolder) {\n        throw new Error('title, projectFolder are required');\n    }\n\n    // our base config\n    var config = {\n        framework: 'hapi',\n        machineName: slugger(options.title),\n        author: '',\n        title: '',\n        indent: options.indent || 4\n    };\n\n    for (var item in options) {\n        config[item] = options[item];\n    }\n\n    var templateDir = __dirname + '/../../template/';\n    fs.copy(templateDir + 'shared', config.projectFolder, {\n        transform: function (readable, writeable, file) {\n            if (isImageFile(file.name)) {\n                readable.pipe(writeable);\n            } else {\n                var transform = new TransformStream(config);\n                readable.pipe(transform).pipe(writeable);\n            }\n        }\n    }, function (err) {\n        if (err) return cb(err);\n        copyFilesInDir(templateDir + config.framework, config);\n        // since we don't have spacemonkey working right for hapi\n        if (config.framework === 'hapi') {\n            fs.removeSync(config.projectFolder + '/test');\n        }\n        fs.outputJsonSync(config.projectFolder + '/package.json', getPackageFile(config), {spaces: 2});\n        cb();\n    });\n};\n\nfunction isImageFile(path) {\n    return /\\.(jpe?g|gif|png)$/.test(path);\n}\n\nfunction copyFilesInDir(dir, options) {\n    fs.readdirSync(dir).forEach(function (filename) {\n        var string = fs.readFileSync(dir + '/' + filename, 'utf8');\n        // replace our template tags with values\n        string = processString(string, options);\n        // write it out\n        fs.outputFileSync(options.projectFolder + '/' + filename, string);\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/app/transformStream.js":"var fs = require('fs'),\n    stream = require('stream'),\n    stream2 = require('readable-stream'),\n    processString = require('./processString'),\n    Transform = stream.Transform || stream2.Transform;\n\nfunction EncodeStream(config) {\n    this.config = config;\n    Transform.call(this);\n}\n\nEncodeStream.prototype = Object.create(Transform.prototype, { constructor: { value: EncodeStream } });\n\nEncodeStream.prototype._transform = function (chunk, encoding, callback) {\n    chunk = chunk.toString();\n    this.push(processString(chunk, this.config));\n    callback();\n};\n\nmodule.exports = EncodeStream;\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/app/processString.js":"var _ = require('lodash');\n\n\nmodule.exports = function (string, config) {\n    string = string.replace(/\\{\\{\\{(\\w+)\\}\\}\\}/g, function (match, p1) {\n        var value = config[p1];\n        return value || match;\n    });\n\n    return string.replace(/    /g, _.repeat(' ', config.indent));\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/app/getPackageFile.js":"var fs = require('fs');\n\n\n// returns populated JS structure for package.json file based on options\nmodule.exports = function (config) {\n    // do this each time to avoid any issues with caching\n    var frameworkDeps = deps[config.framework];\n    var pack = JSON.parse(fs.readFileSync(__dirname + '/templatePackage.json', {encoding: 'utf8'}));\n    var key;\n\n    // extend our dependencies\n    for (key in frameworkDeps) {\n        pack.dependencies[key] = frameworkDeps[key];\n    }\n\n    // set name and author (if provided)\n    pack.name = config.machineName;\n    if (config.author) {\n        pack.author = config.author;\n    } else {\n        delete pack.author;\n    }\n\n    // sort object keys alphabetically\n    pack.dependencies = sortObjectKeysAlphabetically(pack.dependencies);\n    pack.devDependencies = sortObjectKeysAlphabetically(pack.devDependencies);\n    pack.jshintConfig = sortObjectKeysAlphabetically(pack.jshintConfig);\n\n    return pack;\n};\n\n// our list of dependencies for each\nvar deps = {\n    express: {\n        'body-parser': '^1.4.3',\n        'compression': '^1.0.8',\n        'cookie-parser': '^1.3.2',\n        'express': '^4.6.1',\n        'helmet': '^0.7.1',\n        'jade': '^1.3.1',\n        'moonboots-express': '^3.0.0',\n        'semi-static': '^0.0.5',\n        'serve-static': '^1.3.2'\n    },\n    hapi: {\n        'hapi': '^8.0.0',\n        'moonboots_hapi': '^4.0.0'\n    }\n};\n\n\n// because I'm anal\nfunction sortObjectKeysAlphabetically(object) {\n    var sorted = {};\n    Object.keys(object).sort().forEach(function (key) {\n        sorted[key] = object[key];\n    });\n    return sorted;\n}\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/generate-template.js":"var path = require('path');\nvar chalk = require('chalk');\nvar fs = require('fs-extra');\nvar quit = require('./quit');\nvar stdin = require('./helpers/stdin');\nvar readFile = require('./readfilesync');\nvar processTemplate = require('./helpers/process-template');\nvar clean = require('./helpers/clean');\nvar genTypes = require('./gen-types');\n\n\nmodule.exports = function (config) {\n    var type = config._[1];\n    var name = config._[2];\n    var filePath;\n    var folderPath;\n    var collectionPath;\n    var collectionToModelPath;\n    var file;\n    var fileName;\n\n    // allow names with js or not\n    if (name && name.indexOf('.js') === -1) {\n        fileName = name + '.js';\n    } else {\n        fileName = name;\n    }\n\n    if (type === 'router') {\n        folderPath = path.join(config.approot, config.clientfolder);\n        filePath = path.join(folderPath, (fileName || 'router.js'));\n    } else if (type === 'model') {\n        if (!name) quit('please specify a name: ampersand gen model ' + chalk.magenta('${your model name}'));\n        folderPath = path.join(config.approot, config.clientfolder, config.modelfolder);\n        collectionPath = path.join(config.approot, config.clientfolder, config.collectionfolder);\n        filePath = path.join(folderPath, fileName);\n        collectionToModelPath = path.join(path.relative(collectionPath, folderPath), name).replace(/\\\\/g, '/');\n    } else if (type === 'view') {\n        if (!name) quit('please specify a name: ampersand gen view ' + chalk.magenta('${your view name}'));\n        folderPath = path.join(config.approot, config.clientfolder, config.viewfolder);\n        filePath = path.join(folderPath, fileName);\n    } else if (type === 'page') {\n        if (!name) quit('please specify a name: ampersand gen page ' + chalk.magenta('${your page name}'));\n        folderPath = path.join(config.approot, config.clientfolder, config.pagefolder);\n        filePath = path.join(folderPath, fileName);\n    } else if (type === 'form') {\n        if (!name) quit('please specify a path to the model: ampersand gen form ' + chalk.magenta('${path to model}'));\n        folderPath = path.join(config.approot, config.clientfolder, config.formsfolder);\n        filePath = path.join(folderPath, path.basename(fileName));\n    }\n\n    if (name) {\n        config.folderPath = folderPath;\n        config.relPath = path.relative(process.cwd(), filePath);\n        if (!config.force && fs.existsSync(filePath)) return quit('file already exists at: ' +  chalk.magenta(config.relPath) + ' add ' + chalk.magenta('-f') + ' to force');\n        stdin(function (input) {\n            if (input) {\n                config.data = input;\n            }\n            if (type === 'model') {\n                config.name = name;\n                config.collectionToModelPath = collectionToModelPath;\n                genTypes.model(config, function (err, result) {\n                    var modelFilePath = path.join(config.folderPath, result.modelFileName);\n                    var collectionFilePath = path.join(collectionPath, result.collectionFileName);\n                    fs.outputFileSync(modelFilePath, clean(result.model, config), 'utf8');\n                    console.log('\\nnew ' + chalk.magenta('Model') + ' created as ' + chalk.magenta(path.relative(process.cwd(), modelFilePath)));\n                    if (config.makecollection) {\n                        fs.outputFileSync(collectionFilePath, clean(result.collection, config), 'utf8');\n                        console.log('new ' + chalk.magenta('Collection') + ' for ' + chalk.magenta(name) + ' created as ' + chalk.magenta(path.relative(process.cwd(), collectionFilePath)));\n                    }\n                    console.log('');\n                    quit();\n                });\n            } else if (type === 'form') {\n                genTypes.form({modelpath: name}, function (err, code) {\n                    fs.outputFileSync(filePath, clean(code, config), 'utf8');\n                    quit('new ' + chalk.magenta('Form') + ' for ' + chalk.magenta(path.basename(fileName)) + ' created as ' + chalk.magenta(path.relative(process.cwd(), filePath)));\n                });\n            } else {\n                file = readFile(config[type]);\n                if (!file) return quit('no template file found at ' + config[type]);\n                file = clean(processTemplate(file, config), config);\n                fs.outputFileSync(filePath, file, 'utf8');\n                quit('new ' + chalk.magenta(type) + ' created as ' + chalk.magenta(config.relPath), 0);\n            }\n        });\n    } else {\n        quit('no such command');\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/quit.js":"// prints message and kills the process\nmodule.exports = function (message, exitCode) {\n    if (typeof exitCode === 'undefined') {\n        exitCode = 1;\n    }\n    if (message) console.log('\\n' + message + '\\n');\n    process.exit(exitCode || 0);\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/helpers/stdin.js":"module.exports = function getStdin(cb) {\n    if (process.stdin.isTTY) return cb('');\n    var buf = '';\n    process.stdin.setEncoding('utf8');\n    process.stdin.on('readable', function() {\n        var chunk = process.stdin.read();\n        if (chunk !== null) {\n            buf += chunk.toString();\n        }\n    });\n    process.stdin.on('end', function() {\n        cb(buf);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/readfilesync.js":"// dumb, inefficient, synchronous module.\n// This is a bad idea, but super useful for things\n// where performance isn't a big deal, like in a build\n// file or something.\n\n// You can lazily just attempt to read a file path that\n// may or may not exist.\n\n// for example:\n/*\nvar readFile = require('readfilesync');\n\n// this won't ever blow up!\nvar file = readFile('some/path');\n\n// now we can just do\nif (!file) {\n    // handle case of file not present\n}\n\n*/\n\n\n\nvar fs = require('fs');\n\n\nmodule.exports = function (path, encoding) {\n    var res;\n    try {\n        res = fs.readFileSync(path, encoding || 'utf8');\n    } catch (e) {}\n    return res;\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/helpers/process-template.js":"// super simple template engine\nvar RE = /\\{\\{\\{\\s*(\\S+)\\s*\\}\\}\\}/g;\n\n\nmodule.exports = function processTemplate(templateString, context, rewrite) {\n    return templateString.replace(RE, function (whole, specific) {\n        return context[specific];\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/helpers/clean.js":"var esprima = require('esprima');\nvar escodegen = require('escodegen');\nvar repeat = require('repeat-string');\n\n\nmodule.exports = function (code, config) {\n    var ast = esprima.parse(code, {raw: true, tokens: true, range: true, comment: true});\n    ast = escodegen.attachComments(ast, ast.comments, ast.tokens);\n    code = escodegen.generate(ast, {\n        comment: true,\n        format: {\n            indent: {\n                style: config.useTabs ? '\\t' : repeat(' ', config.indent),\n                base: 0,\n                adjustMultilineComment: true\n            },\n            quotes: config.quotes\n        },\n\n    });\n\n    // ensures spacing of require statements\n    var split = code.split('\\n');\n    var varDec = /^[(var)(\\/\\/)(\\/\\*.*\\*\\/)]/;\n    var lineNum = 0;\n    var inMultiComment = false;\n    var multiCommentStart = /\\/\\*/;\n    var multiCommentEnd = /\\*\\//;\n\n    split.some(function (line, index) {\n        if (!varDec.test(line) && !inMultiComment) {\n            lineNum = index;\n            return true;\n        } else {\n            if (inMultiComment) {\n                if (multiCommentEnd.test(line)) {\n                    inMultiComment = false;\n                }\n            } else if (multiCommentStart.test(line)) {\n                inMultiComment = true;\n            }\n        }\n    });\n\n    split.splice(lineNum, 0, '', '');\n\n    return split.join('\\n');\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/gen-types/index.js":"var model = require('./model');\nvar form = require('./form');\n\n\nmodule.exports = {\n    model: model,\n    form: form\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/gen-types/model.js":"var fs = require('fs');\nvar _ = require('lodash');\nvar repeat = require('repeat-string');\nvar processTemplate = require('../helpers/process-template');\nvar collectionTemplate = fs.readFileSync(__dirname + '/../templates/collection.js', 'utf8');\nvar modelTemplate = fs.readFileSync(__dirname + '/../templates/model.js', 'utf8');\n\n\nmodule.exports = function(opts, cb) {\n    opts || (opts = {});\n    var name = opts.name;\n    var fileName = _.kebabCase(name);\n\n    // build out our config\n    var config = _.extend({\n        fileName: fileName,\n        collectionFileName: fileName + '-collection',\n        reqPath: 'ampersand-model',\n        collectionTemplate: collectionTemplate,\n        modelTemplate: modelTemplate,\n        data: {\n            id: 'something'\n        }\n    }, opts);\n\n    var obj = findObj(config.data);\n    var idKey = findId(obj);\n    var result = {};\n\n    // figure out our indent string\n    config.indentString = (function() {\n        if (config.useTabs) return '\\t';\n        return repeat(' ', config.indent);\n    })();\n\n    // sort with ID first\n    var sorted = {};\n    if (idKey) {\n        sorted[idKey] = obj[idKey];\n    }\n    obj = _.extend(sorted, obj);\n\n    // generate property definitions\n    config.props = getProps(obj);\n\n    if (!config.url) config.url = '/api/' + config.fileName;\n\n    result.name = name;\n    result.modelFileName = config.fileName + '.js';\n    result.collectionFileName = config.collectionFileName + '.js';\n    result.collection = processTemplate(config.collectionTemplate, config);\n    result.model = processTemplate(config.modelTemplate, config);\n\n    cb(null, result);\n};\n\n\nfunction getProps(obj) {\n    var buf = [];\n    var indent = repeat(' ', 8);\n    var keys = _.keys(obj);\n    var length = keys;\n    _.each(keys, function(key, index) {\n        var val = obj[key];\n        var res;\n        if (_.isString(val)) {\n            res = '[\\'string\\']';\n        } else if (_.isArray(val)) {\n            res = '[\\'array\\']';\n        } else if (_.isNumber(val)) {\n            res = '[\\'number\\']';\n        } else if (_.isBoolean(val)) {\n            res = '[\\'boolean\\']';\n        } else {\n            res = '[\\'object\\']';\n        }\n        buf.push(indent + key + ': ' + res);\n    });\n    return buf.join(',\\n');\n}\n\nvar idNames = ['id', '_id', 'ID', '_ID', 'primary'];\n\nfunction findId(obj) {\n    var keys = _.keys(obj);\n}\n\nfunction findObj(input) {\n    if (typeof input === 'string') {\n        input = JSON.parse(input);\n    }\n    if (_.isArray(input)) {\n        return findObj(input[0]);\n    } else {\n        return input;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/gen-types/form.js":"var fs = require('fs');\nvar _ = require('lodash');\nvar esprima = require('esprima');\nvar processTemplate = require('../helpers/process-template');\n\nvar formTemplate = fs.readFileSync(__dirname + '/../templates/form.js', 'utf8');\nvar inputTemplate = fs.readFileSync(__dirname + '/../templates/input.js', 'utf8');\nvar arrayInputTemplate = fs.readFileSync(__dirname + '/../templates/array-input.js', 'utf8');\nvar selectInputTemplate = fs.readFileSync(__dirname + '/../templates/select-input.js', 'utf8');\nvar checkboxInputTemplate = fs.readFileSync(__dirname + '/../templates/checkbox-input.js', 'utf8');\n\nvar defaultModel = ['var BaseModel = Model.extend({',\n'    props: {id: \\'string\\'}',\n'});'].join('\\n');\n\nmodule.exports = function(opts, cb) {\n    opts = opts || {};\n    var output = {};\n\n    // build out our config\n    var config = _.extend({\n        model: (opts.modelpath) ? fs.readFileSync(opts.modelpath, 'utf8') : defaultModel,\n        formtemplate: formTemplate,\n        inputtemplate: inputTemplate,\n        selecttemplate: selectInputTemplate,\n        checkboxtemplate: checkboxInputTemplate,\n        arrayinputtemplate: arrayInputTemplate\n    }, opts);\n\n    var fieldMap = {\n        string: function(field) {\n            requires.InputView = 'ampersand-input-view';\n            return '            ' + processTemplate(config.inputtemplate, field).trim();\n        },\n        array: function(field) {\n            requires.ArrayInputView = 'ampersand-array-input-view';\n            return '            ' + processTemplate(config.arrayinputtemplate, field).trim();\n        },\n        boolean: function(field) {\n            requires.CheckboxView = 'ampersand-checkbox-view';\n            return '            ' + processTemplate(config.checkboxtemplate, field).trim();\n        },\n        select: function(field) {\n            requires.SelectView = 'ampersand-select-view';\n            return '            ' + processTemplate(config.selecttemplate, field).trim();\n        }\n    };\n\n    fieldMap.number = fieldMap.string;\n\n    var requires = {};\n\n    // parse our JS\n    var ast = esprima.parse(config.model);\n\n    _.each(ast.body, function(item) {\n        if (item.type === 'ExpressionStatement') {\n            try {\n                // last argument to `extend`\n                var objectProperties = _.last(item.expression.right.arguments).properties;\n                // get props\n                var props = _.find(objectProperties, function(value) {\n                    return value.type === 'Property' && value.key.name === 'props';\n                });\n                props = props.value.properties;\n\n                // handle different ways of providing types\n                _.each(props, function(prop) {\n                    var def = output[prop.key.name] = {};\n                    if (prop.value.type === 'Literal') {\n                        def.type = prop.value.value;\n                    } else if (prop.value.type === 'ArrayExpression') {\n                        def.type = prop.value.elements[0].value;\n                    } else if (prop.value.type === 'ObjectExpression') {\n                        _.find(prop.value.properties, function(prop) {\n                            if (prop.type === 'Property' && prop.key.name === 'type') {\n                                def.type = prop.value.value;\n                            }\n                            if (prop.type === 'Property' && prop.key.name === 'values') {\n                                def.type = 'select';\n                                def.options = _.map(prop.value.elements, function(element) {\n                                    return element.raw;\n                                });\n                            }\n                        });\n                    }\n                });\n            } catch (e) {}\n        }\n    });\n\n    var buff = [];\n\n    _.each(output, function(definition, key) {\n        var func = fieldMap[definition.type];\n        if (func) {\n            buff.push(func({\n                name: key,\n                label: toLabel(key),\n                required: !!definition.required,\n                options: definition.options\n            }));\n        }\n    });\n\n    var requireString = _.reduce(requires, function(buff, value, key) {\n        return buff += 'var ' + key + ' = require(\\'' + value + '\\');\\n';\n    }, '');\n\n    // make a string\n    buff = buff.join(',\\n');\n\n    console.log('\\nYou can install required views by running:\\n$ npm install ' + _.values(requires).join(' ') + ' --save');\n\n    cb(null, processTemplate(config.formtemplate, {\n        fields: buff,\n        requires: requireString\n    }));\n};\n\n\nvar toLabel = function(string) {\n    return separateWords(pascalize(string), ' ');\n};\n\nvar separateWords = function(string, separator) {\n    if (separator === undefined) {\n        separator = '_';\n    }\n    return string.replace(/([a-z])([A-Z0-9])/g, '$1' + separator + '$2');\n};\n\nvar camelize = function(string) {\n    string = string.replace(/[\\-_\\s]+(.)?/g, function(match, chr) {\n        return chr ? chr.toUpperCase() : '';\n    });\n    // Ensure 1st char is always lowercase\n    return string.replace(/^([A-Z])/, function(match, chr) {\n        return chr ? chr.toLowerCase() : '';\n    });\n};\n\nvar pascalize = function(string) {\n    return camelize(string).replace(/^([a-z])/, function(match, chr) {\n        return chr ? chr.toUpperCase() : '';\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/templates/array-input.js":"new ArrayInputView({\n    label: '{{{ label }}}',\n    name: '{{{ name }}}',\n    value: this.model.{{{ name }}} || [],\n    minLength: 0,\n    parent: this\n})\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/templates/checkbox-input.js":"new CheckboxView({\n    label: '{{{ label }}}',\n    name: '{{{ name }}}',\n    value: this.model.{{{ name }}},\n    parent: this\n})\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/templates/collection.js":"// {{{ name }}} Collection - {{{ collectionFileName }}}.js\nvar AmpCollection = require('ampersand-rest-collection');\nvar {{{ name }}} = require('{{{ collectionToModelPath }}}');\n\n\nmodule.exports = AmpCollection.extend({\n    model: {{{ name }}},\n    url: '{{{ url }}}'\n});\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/templates/input.js":"new InputView({\n    label: '{{{ label }}}',\n    name: '{{{ name }}}',\n    value: this.model && this.model.{{{ name }}},\n    required: {{{ required }}},\n    placeholder: '{{{ label }}}',\n    parent: this\n})\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/templates/page.js":"var View = require('ampersand-view');\n\n\nmodule.exports = View.extend({\n    template: '<div>new view</div>',\n    initialize: function () {\n        // use or delete\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/templates/router.js":"var Router = require('ampersand-router');\n\n\nmodule.exports = Router.extend({\n    routes: {\n        '': 'home'\n    },\n\n    // ------- ROUTE HANDLERS ---------\n    home: function () {\n        // this.trigger('newPage', new HomePage());\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/templates/select-input.js":"new SelectView({\n    label: '{{{ label }}}',\n    name: '{{{ name }}}',\n    value: this.model.{{{ name }}},\n    options: [{{{ options }}}],\n    required: {{{ required }}},\n    parent: this\n})\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/lib/templates/view.js":"var View = require('ampersand-view');\n\n\nmodule.exports = View.extend({\n    template: '<div>new view</div>',\n    initialize: function () {\n        // use or delete\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/template/express/fakeApi.js":"var _ = require('lodash');\n\n\nvar people = [\n    {\n        id: 1,\n        firstName: 'Henrik',\n        lastName: 'Joreteg',\n        coolnessFactor: 11\n    },\n    {\n        id: 2,\n        firstName: 'Bob',\n        lastName: 'Saget',\n        coolnessFactor: 2\n    },\n    {\n        id: 3,\n        firstName: 'Larry',\n        lastName: 'King',\n        coolnessFactor: 4\n    },\n    {\n        id: 4,\n        firstName: 'Diana',\n        lastName: 'Ross',\n        coolnessFactor: 6\n    },\n    {\n        id: 5,\n        firstName: 'Crazy',\n        lastName: 'Dave',\n        coolnessFactor: 8\n    },\n    {\n        id: 6,\n        firstName: 'Larry',\n        lastName: 'Johannson',\n        coolnessFactor: 4\n    }\n];\nvar id = 7;\n\nfunction get(id) {\n    return _.findWhere(people, {id: parseInt(id + '', 10)});\n}\n\nexports.list = function (req, res) {\n    res.send(people);\n};\n\nexports.add = function (req, res) {\n    var person = req.body;\n    person.id = id++;\n    people.push(person);\n    res.status(201).send(person);\n};\n\nexports.get = function (req, res) {\n    var found = get(req.params.id);\n    res.status(found ? 200 : 404);\n    res.send(found);\n};\n\nexports.delete = function (req, res) {\n    var found = get(req.params.id);\n    if (found) people = _.without(people, found);\n    res.status(found ? 200 : 404);\n    res.send(found);\n};\n\nexports.update = function (req, res) {\n    var found = get(req.params.id);\n    if (found) _.extend(found, req.body);\n    res.status(found ? 200 : 404);\n    res.send(found);\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/template/express/server.js":"/* global console */\nvar path = require('path');\nvar express = require('express');\nvar helmet = require('helmet');\nvar bodyParser = require('body-parser');\nvar cookieParser = require('cookie-parser');\nvar Moonboots = require('moonboots-express');\nvar compress = require('compression');\nvar config = require('getconfig');\nvar semiStatic = require('semi-static');\nvar serveStatic = require('serve-static');\nvar stylizer = require('stylizer');\nvar templatizer = require('templatizer');\nvar app = express();\n\n// a little helper for fixing paths for various environments\nvar fixPath = function (pathString) {\n    return path.resolve(path.normalize(pathString));\n};\n\n\n// -----------------\n// Configure express\n// -----------------\napp.use(compress());\napp.use(serveStatic(fixPath('public')));\n\n// we only want to expose tests in dev\nif (config.isDev) {\n    app.use(serveStatic(fixPath('test/assets')));\n    app.use(serveStatic(fixPath('test/spacemonkey')));\n}\n\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\n// in order to test this with spacemonkey we need frames\nif (!config.isDev) {\n    app.use(helmet.xframe());\n}\napp.use(helmet.xssFilter());\napp.use(helmet.nosniff());\n\napp.set('view engine', 'jade');\n\n\n// -----------------\n// Set up our little demo API\n// -----------------\nvar api = require('./fakeApi');\napp.get('/api/people', api.list);\napp.get('/api/people/:id', api.get);\napp.delete('/api/people/:id', api.delete);\napp.put('/api/people/:id', api.update);\napp.post('/api/people', api.add);\n\n\n// -----------------\n// Enable the functional test site in development\n// -----------------\nif (config.isDev) {\n    app.get('/test*', semiStatic({\n        folderPath: fixPath('test'),\n        root: '/test'\n    }));\n}\n\n\n// -----------------\n// Set our client config cookie\n// -----------------\napp.use(function (req, res, next) {\n    res.cookie('config', JSON.stringify(config.client));\n    next();\n});\n\n\n// ---------------------------------------------------\n// Configure Moonboots to serve our client application\n// ---------------------------------------------------\nnew Moonboots({\n    moonboots: {\n        jsFileName: '{{{machineName}}}',\n        cssFileName: '{{{machineName}}}',\n        main: fixPath('client/app.js'),\n        developmentMode: config.isDev,\n        libraries: [\n        ],\n        stylesheets: [\n            fixPath('stylesheets/bootstrap.css'),\n            fixPath('stylesheets/app.css')\n        ],\n        browserify: {\n            debug: config.isDev\n        },\n        beforeBuildJS: function () {\n            // This re-builds our template files from jade each time the app's main\n            // js file is requested. Which means you can seamlessly change jade and\n            // refresh in your browser to get new templates.\n            if (config.isDev) {\n                templatizer(fixPath('templates'), fixPath('client/templates.js'));\n            }\n        },\n        beforeBuildCSS: function (done) {\n            // This re-builds css from stylus each time the app's main\n            // css file is requested. Which means you can seamlessly change stylus files\n            // and see new styles on refresh.\n            if (config.isDev) {\n                stylizer({\n                    infile: fixPath('stylesheets/app.styl'),\n                    outfile: fixPath('stylesheets/app.css'),\n                    development: true\n                }, done);\n            } else {\n                done();\n            }\n        }\n    },\n    server: app\n});\n\n\n// listen for incoming http requests on the port as specified in our config\napp.listen(config.http.port);\nconsole.log('{{{title}}} is running at: http://localhost:' + config.http.port + ' Yep. That\\'s pretty awesome.');\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/template/hapi/moonbootsConfig.js":"var config = require('getconfig');\nvar stylizer = require('stylizer');\nvar templatizer = require('templatizer');\n\n// for reuse\nvar appDir = __dirname + '/client';\nvar cssDir = __dirname + '/stylesheets';\n\n\nmodule.exports = {\n    // Tell the Hapi server what URLs the application should be served from.\n    // Since we're doing clientside routing we want to serve this from some type\n    // of wildcard url.\n    // examples:\n    //     '/{p*}' - match everything that isn't matched by something more specific\n    //     '/dashboard/{p*}' - serve the app at all routes starting with '/dashboard'\n    appPath: '/{p*}',\n    // The moonboots config\n    moonboots: {\n        // The base name of the javascript file served in the <script src=\"the_name.*.js\">\n        jsFileName: '{{{machineName}}}',\n        // The base name of the css file served in the <link rel=\"stylesheet\" src=\"the_name.*.css\">\n        cssFileName: '{{{machineName}}}',\n        main: appDir + '/app.js',\n        developmentMode: config.isDev,\n        // Specify any non-commonjs libraries we wish to include.\n        // You can think of this as your list of <script> tags in your HTML.\n        // These will simply be included before any of your application code in the\n        // order you provide them. So for example, if you're using jQuery make sure\n        // you list any plugins after jQuery itself.\n        libraries: [\n        ],\n        // Specify the stylesheets we want to bundle\n        stylesheets: [\n            cssDir + '/bootstrap.css',\n            cssDir + '/app.css'\n        ],\n        browserify: {\n            debug: config.isDev\n        },\n        beforeBuildJS: function () {\n            // This re-builds our template files from jade each time the app's main\n            // js file is requested. Which means you can seamlessly change jade and\n            // refresh in your browser to get new templates.\n            if (config.isDev) {\n                templatizer(__dirname + '/templates', appDir + '/templates.js');\n            }\n        },\n        beforeBuildCSS: function (done) {\n            // We only want to do this in dev mode. If it's not in dev mode, this\n            // function will only be run once.\n            if (!config.isDev) {\n                done();\n                return;\n            }\n            // Re-compile stylus to css each time the app's main css file is requested.\n            // In addition there's a \"watch\" option that will make stylizer also be able\n            // to talk to livereaload (http://livereload.com/) browser plugins for sneakily\n            // refreshing styles without waiting for you to refresh or running/configuring\n            // the live reload app.\n            stylizer({\n                infile: cssDir + '/app.styl',\n                outfile: cssDir + '/app.css',\n                development: true,\n                // Beware there's an issue with watch on OSX that causes issues with\n                // watch if you're not running node 0.10.25 or later.\n                watch: cssDir + '/**/*.styl'\n            }, done);\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-ampersand/node_modules/ampersand/template/hapi/staticRoutes.js":"exports.register = function (plugin, options, next) {        \n    // Tell Hapi to handle the public folder as a file directory\n    plugin.route({ \n        method: 'GET',\n        path: '/images/{param*}',\n        handler: {directory: {path: 'public/images/'}}\n    });\n\n    // We expect those files to be availiable from the root of our web app\n    plugin.route({\n        method: 'GET',\n        path: '/robots.txt',\n        handler: {file: {path: 'public/robots.txt'}}\n    });\n\n    plugin.route({\n        method: 'GET',\n        path: '/favicon.ico',\n        handler: {file: {path: 'public/favicon.ico'}}\n    });\n\n    next();\n};\n\nexports.register.attributes = {\n    version: '0.0.0',\n    name: 'static_routes'\n};\n"}